name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          # Repository name with owner. For example, actions/checkout
          repository: optional, default is ${{ github.repository }}
          # The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.
      
          ref: optional
          # Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.
      
          token: optional, default is ${{ github.token }}
          # SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.

          ssh-key: optional
          # Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example, `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
      
          ssh-known-hosts: optional
          # Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes` and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to configure additional hosts.
      
          ssh-strict: optional, default is true
          # The user to use when connecting to the remote SSH host. By default 'git' is used.
      
          ssh-user: optional, default is git
          # Whether to configure the token or SSH key with the local git config
          persist-credentials: optional, default is true
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: optional
          # Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
          clean: optional, default is true
          # Partially clone against a given filter. Overrides sparse-checkout if set.
          filter: optional
          # Do a sparse checkout on given patterns. Each pattern should be separated with new lines.
      
          sparse-checkout: optional
          # Specifies whether to use cone-mode when doing a sparse checkout.
      
          sparse-checkout-cone-mode: optional, default is true
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: optional, default is 1
          # Whether to fetch tags, even if fetch-depth > 0.
          fetch-tags: optional
          # Whether to show progress status output when fetching.
          show-progress: optional, default is true
          # Whether to download Git-LFS files
          lfs: optional
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules.     
          submodules: optional
          # Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory <path>`
          set-safe-directory: optional, default is true
          # The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com
          github-server-url: optional
                
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      
